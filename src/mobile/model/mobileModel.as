package mobile.model {	import mobile.*;	import mobile.model.*;	import mobile.view.*;	import mobile.controller.*;	import flash.events.EventDispatcher;	import flash.events.Event;		import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.greensock.loading.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.display.*;		public class mobileModel extends EventDispatcher {				public static const UPDATE_UI:String='updateUI';				public var queue:LoaderMax;		public var navOnOff:Boolean;				public var _videoIsPlaying:Boolean;		public var _transportIsVisible:Boolean;		public var _drawerIsOpen:Boolean;		public var _savedIsOpen:Boolean;		public var _isBackgroundDim:Boolean;				public var _closeOnOff:Boolean;				public var _sections:Array;		public var _sectionMemory:Array;		public var _openSection:String;		public var _openSubSection:String;		public var _whatSubIsOpen:String;				public var _whatPrimaryIsOpen:String;		public var _subSections:Array;								public function mobileModel() {				this.navOnOff = true;			this._drawerIsOpen = false;						this._closeOnOff = false;			// set ui data			this._sections = [ {clip: "_guide", title:"Guide", subNav:["Full Listings"], subClip:["_fullListing"]}, {clip: "_saved", title:"Saved", subNav:["Recent Activity", "Recordings","Downloads"], subClip:["_recentActivity", "_recordings","_downloads"]}, {clip: "_search", title:"Search", subNav:[null], subClip:["_searchResults"]}];						this._openSection = null;			this._openSubSection = null;			this._whatSubIsOpen = null;			this._subSections = [];						transportIsVisible = false;									//External img queue			queue = new LoaderMax({name:"mainQueue", auditSize:false, maxConnections:7});		}				public function resetApp():void{						this._openSection = null;			this._openSubSection = null;			this._whatSubIsOpen = null;			this._subSections = [];											}				// Get navigation Array 'sections'		public function get sections():Array{			return _sections;		}				// set primary sections		public function set openSection(value:String):void{			//set by UI controller			this._openSection = value;			var i:uint			for(i= 0; i< _sections.length; i++){				if ( _sections[i].clip == this._openSection){										// pull and set secondary section array 'subClip' from 'Sections'					this._subSections = _sections[i].subClip;					// label what primary is open					this._whatPrimaryIsOpen = _sections[i].title; 					// set secondary (sub) 					this._openSubSection = _sections[i].subClip[0];					// update view					notifyObservers();				}			}		}		// get primary sections		public function get openSection():String{			return _openSection;		}				// Get secondary (sub) sections (set by primary)		public function get subSections():Array{			return _subSections;		}				// Get current primary section		public function get whatPrimaryIsOpen():String{			return _whatPrimaryIsOpen;		}				public function set whatSubIsOpen(value:String):void{			this._whatSubIsOpen = value;		/*	trace("open: "+_whatSubIsOpen);*/		}		public function get whatSubIsOpen():String{			return _whatSubIsOpen;		}				public function set openSubSection(value:String):void{			this._openSubSection = value;	/*		trace("requested: "+_whatSubIsOpen);*/			notifyObservers();		}				public function get openSubSection():String{			return _openSubSection;		}						// Set state of Navigation Drawer		public function set drawerIsOpen(value:Boolean):void{			this._drawerIsOpen = value;			notifyObservers();		}				// Get Navigation Drawer state		public function get drawerIsOpen():Boolean{			return _drawerIsOpen;		}				// Set state of transport		public function set transportIsVisible(value:Boolean):void{			this._transportIsVisible = value;			notifyObservers();		}				// Get transport state		public function get transportIsVisible():Boolean{			return _transportIsVisible;		}				// Set Pause Play for Video				public function set videoIsPlaying(value:Boolean):void{			this._videoIsPlaying = value			notifyObservers();		}						// Get video state		public function get videoIsPlaying():Boolean{						return _videoIsPlaying;		}				public function set closeOnOff(value:Boolean):void{			this._closeOnOff = 	value		/*	notifyObservers();*/		}				public function get closeOnOff():Boolean{						return _closeOnOff;		}				//load media 		public function loadQueue():void{							queue.load();		}				// Dispatch to View and Model		function notifyObservers():void {			dispatchEvent(new Event(mobileModel.UPDATE_UI));		}	}}