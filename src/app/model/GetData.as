////  GetData////  Created by Matthew on 2012-11-04.//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.////package app.model{	import com.mhl.*;	import app.model.Entity	import app.model.AppModel;	import com.mhl.libs.recentActivity;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.utils.Dictionary; 	import fl.data.DataProvider;	import flash.data.SQLResult;	import flash.data.SQLConnection;	import flash.filesystem.File;	import flash.data.SQLStatement;	import flash.data.SQLConnection;	import flash.events.*;	import flash.events.EventDispatcher;	import flash.events.Event;	 public class GetData {			protected var model:AppModel			protected var selectStmt:SQLStatement			protected var result:SQLResult			protected var _entitymap:Dictionary;			protected var name:String;			protected var queryname:String;			// ABSTRACT Class (should be subclassed and not instantiated)			public function GetData(model:AppModel) {				this.model = model;					this._entitymap = new Dictionary();			}						// ABSTRACT Method (must be overridden in a subclass);			public function init():void{}						public function get entitymap ():Dictionary{				return _entitymap			}				public function query(name:String, query:String, myClass:Class, num:int):void			{				trace("Loading data");				var queryName = name;				selectStmt = new SQLStatement();				selectStmt.sqlConnection = this.model.entityData.conn;				var sql:String = query;				selectStmt.text = sql;				selectStmt.itemClass = myClass;				selectStmt.addEventListener(SQLEvent.RESULT, selectResult);				selectStmt.addEventListener(SQLErrorEvent.ERROR, selectError);				selectStmt.execute(num);			}						public 	function selectResult(event:SQLEvent):void				{					trace("Result Ready: Notify");					selectStmt.removeEventListener(SQLEvent.RESULT, selectResult);					selectStmt.removeEventListener(SQLErrorEvent.ERROR, selectError);					result = selectStmt.getResult();									entitymap[queryname] = result;					/*					for(var entity:* in result.data) {						entitymap[result.data[entity].entityType] = new Array();					}					for(var entityType:* in result.data) {						entitymap[result.data[entityType].entityType].push(result.data[entityType]);					}					if (!result.complete)				        {				            dbStatement.next(100);				        }*/					}			public function selectError(event:SQLErrorEvent):void				{					trace("Error loading data");					selectStmt.removeEventListener(SQLEvent.RESULT, selectResult);					selectStmt.removeEventListener(SQLErrorEvent.ERROR, selectError);					trace("SELECT error:", event.error);					trace("event.error.message:", event.error.message);					trace("event.error.details:", event.error.details);				}		}};