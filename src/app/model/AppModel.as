package app.model {	import app.*;	import app.model.*;	import app.view.*;	import app.control.*;	import com.mhl.data.database;	import flash.utils.Dictionary; 	import flash.data.SQLResult;	import flash.data.SQLStatement;	import com.mhl.views.entity;	import flash.events.EventDispatcher;	import flash.events.Event;		public class AppModel extends EventDispatcher {				public static const UPDATE:String='update';		private var _dataConn:DataConn;		private var _dbResult:SQLResult;		private var _entitymap:Dictionary;		private var _sections:Dictionary;/*		private var _shows:Object;		private var _movies:Object;		private var _records:Array;*/	public function AppModel() {			//instance of com.mhl.data.database			this._dataConn = new DataConn(this);			//Object to hold db query for tv/episodes			this._entitymap = new Dictionary();			this._sections = new Dictionary();		}				public function entityqueue():void{/*			var Featured:String = "SELECT parentTitle, entityType, title, p, description FROM movies WHERE newforRelevance='true' AND releaseYear = '2012'";			var NewReleases:String = "SELECT parentTitle, entityType, title, p, description  FROM movies WHERE newforRelevance='true'";			var PremiumMovies:String = "SELECT parentTitle, entityType, title, p, description  FROM movies WHERE hasHD='true' AND rating='r'";			var FreeMovies:String = "SELECT parentTitle, entityType, title, p, description  FROM movies WHERE price='Free'"						var Featured:String = "SELECT parentTitle, entityType, title, p, description  FROM tv WHERE newforRelevance='true' AND originalAirDate='2012-02-16' OR originalAirDate='2012-02-14'";			var TopWatched:String = "SELECT parentTitle, entityType, title, p, description  FROM tv";			var TopDrama:String = "SELECT  parentTitle, entityType, title, p, description  FROM tv WHERE genre='Drama'";			var Kids:String = "SELECT parentTitle, entityType, title, p, description  FROM tv WHERE rating='TVG'";*/		}		public function addData(section:EntityData):void{			/*	_sections[section.title] = section.entitymap*/								}/*		public function get shows():Object{			return _shows		}*/		//set call to database: query string, 'entity' ref hard coded		public function set dbQuery(query:String):void{			this._dataConn.getData(query, entity, 25);		}		public function get dataConn():DataConn{			return _dataConn		}		public function set dbResult(rslt:SQLResult):void{			//set result 			this._dbResult = rslt;			//sort by entity type 						//loop and assiative array  by parent title (hold episode objects by eries)			for(var entity:* in rslt.data) {				_entitymap[rslt.data[entity].entityType] = new Array();			}			for(var entityType:* in rslt.data) {				_entitymap[rslt.data[entityType].entityType].push(rslt.data[entityType]);			}/*			if (!rslt.complete)		        {		            dbStatement.next(100);		        }*/			//Update view / data is ready 			notifyObservers();		}		//db hooks		public function get dbResult():SQLResult{			return _dbResult;		}				public function get entitymap():Dictionary{			return _entitymap;		}				// Dispatch to View and Model		function notifyObservers():void {			dispatchEvent(new Event(AppModel.UPDATE));		}	}}