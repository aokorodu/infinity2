package app.control{	import app.*;	import app.model.*;	import app.view.*;	import app.control.*;	import fl.controls.Button;	import flash.display.MovieClip;	import flash.events.Event	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.GestureEvent;	import flash.events.PressAndTapGestureEvent;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.FocusEvent;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.greensock.loading.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.display.*;			public class AppControl extends MovieClip{		private var model:AppModel;		private var _viewIndex:int;		private var _views:Array;		private var _uiarr:Array;		private var _ui:MovieClip;		private var _content:MovieClip;		private var _entity:Entity;		private var _keycode:int;		private var _clip_in_focus:MovieClip;		private var _clip_out_focus:MovieClip;/*		private var _row:MovieClip;		private var _button:AppButton;*//*		Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;*/		public function AppControl(model:AppModel) {			this.model = model;			this._views = new Array();			this._content = new MovieClip();			addChild(_content);			this.model.holder = this._content;			_uiarr = new Array();						var _grid:AppView = new Grid(model, this, this._content);			addView(_grid);									// fake user request for 'downloads' would be object listening for user input 			_ui = new MovieClip(); addChild(_ui);			var _shows = new ButtonTv(); _ui.addChild(_shows);			var _movies = new ButtonMovies(); _ui.addChild(_movies);			_movies.x = _shows.x+ _shows.width+20; _ui.x = 1024/2-_ui.width/2;_ui.y = 25;			_uiarr = [_shows, _movies];			_shows.addEventListener(MouseEvent.MOUSE_DOWN, onTv);			_movies.addEventListener(MouseEvent.MOUSE_DOWN, onMovies);	/*		_content.addEventListener(MouseEvent.MOUSE_DOWN, entity);*/	/*		this.addEventListener(KeyboardEvent.KEY_UP, onKey);*/			_shows.tabEnabled = false			_movies.tabEnabled = false				 			this._keycode = 0;			_clip_out_focus = new MovieClip();			_clip_out_focus.x = -250;			_clip_in_focus = new MovieClip();			}		public function selectfocus(e:KeyboardEvent):void {				_entity = e.target.parent.entity/*				trace(_entity)			if(_views[_viewIndex].viewState){				_entitySel	 = _views[_viewIndex].catalog.entitymap[e.target] }else{_entitySel = _views[_viewIndex].single.entitymap[e.target]}*/							if(e.keyCode== 32){ 				this.model.destinationEntity = _entity;				switch(_entity.entityType){					case"Series":					trace("I am a Series");					this.model.episodes = "'"+_entity.parentTitle+"'";					break;					case "Episode":					trace("I am a Episode");					break;					case "Movie":					trace("I am a Movie");					break;				}							}		}		public function changefocus(e:FocusEvent):void {			this._keycode = e.keyCode;			trace("change:"+e.target.parent);						var _button_in = e.target;			var _entity_change = e.target.parent.entity		/*			var dy = _clip_out_focus.y - _clip_in_focus.y 			var dx =   _clip_out_focus.x -_clip_in_focus.x;			var _distance = Math.sqrt(dx*dx + dy*dy);*/			trace("Onchange:"+_entity_change.title);			switch(this._keycode){				case 37:/*					_row_in.sx+= 250					trace(_row_in.sx);*/			/*		trace("sx:"+_row_in.sx);*/				/*	_row_in.x = _row_in.sx*/			/*		TweenLite.to(_row_in, 1, {x:_row_in.sx, ease:Expo.easeOut});*/				break				case 39:	/*				_row_in.sx-= 250*/				/*	trace("sx:"+_row_in.sx);*/			/*		_row_in.x = _row_in.sx;*/				/*	TweenLite.to(_row_in, 1, {x:_row_in.sx, ease:Expo.easeOut});*/				break;			}							}				public function infocus(e:FocusEvent):void {				var _entity_in = e.target.parent.entity					var _row_in = e.target.parent.parent				var dy = _clip_out_focus.y - _clip_in_focus.y 				var dx =   _clip_out_focus.x -_clip_in_focus.x;				var _distance = Math.sqrt(dx*dx + dy*dy);				trace("In:"+_entity_in.title);			switch(this._keycode){				case 37:					_clip_in_focus = e.target.parent					_row_in.sx+= 250					TweenLite.to(_row_in, .5, {x:_row_in.sx, ease:Expo.easeOut});				break				case 39:					_clip_in_focus = e.target.parent					_row_in.sx-= 250;					TweenLite.to(_row_in, .5, {x:_row_in.sx, ease:Expo.easeOut});				break;			}								}		public function notinfocus(e:FocusEvent):void {			var _entity_out = e.target.parent.entity				trace("Out:"+_entity_out.title);			switch(this._keycode){				case 37:					 _clip_out_focus = e.target.parent				break				case 39:					 _clip_out_focus = e.target.parent				break;			}					}				public function addView(view:AppView):void{			_views.push(view);			if(_views.length == 1){ _content.addChild(view); _viewIndex = 0; }			} 		private function toggleViews():void{			/*	_ui._shows.tabEnabled;*/				for (var i:Number=0; i<= _uiarr.length; i++){				trace(_uiarr[i]);				}				_content.removeChild(_views[_viewIndex]);			/*			while (_views[_viewIndex].numChildren > 0) {			    _views[_viewIndex].removeChildAt(0);			}*/			_content.addChild(_views[_viewIndex]);		}		// add touch, mouse, and keyboard controls 		private function entity(e:MouseEvent):void{			var _entity:Entity;			if(_views[_viewIndex].viewState){				_entity	 = _views[_viewIndex].catalog.entitymap[e.target] }else{_entity = _views[_viewIndex].single.entitymap[e.target]}			this.model.destinationEntity = _entity;			switch(_entity.entityType){				case"Series":				trace("I am a Series");				this.model.episodes = "'"+_entity.parentTitle+"'";				break;				case "Episode":				trace("I am a Episode");				break;				case "Movie":				trace("I am a Movie");				break;			}			/*if(_entity.entityType =="Series"){ this.model.episodes = "'"+_entity.parentTitle+"'"; }*/					}		private function onTv(e:MouseEvent):void{			toggleViews();			this.model.catalog = [ "Featured Tv", "Top Drama", "Top Watched", "Kids Tv"];		}					private function onMovies(e:MouseEvent):void{			toggleViews();			this.model.catalog = [ "Featured Movies","Premium Movies", "New Releases", "Free Movies"];		}			public function update(e:Event):void {		trace("Update UI")		}			}}