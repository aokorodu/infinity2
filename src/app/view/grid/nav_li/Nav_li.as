////  Grid nav_li////  Created by Matthew on 2012-11-03.//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.////package app.view.grid.nav_li {	import app.*;	import app.model.*;	import app.view.*;	import app.control.*;	import com.factory.*;	import flash.utils.Dictionary; 	import fl.controls.Button;	import flash.display.MovieClip;	import flash.geom.Point;	import flash.geom.ColorTransform;	import flash.events.MouseEvent	import flash.events.TouchEvent;	import flash.events.Event	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.greensock.loading.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.display.*;		 public class Nav_li extends MovieClip{		protected var model:AppModel		protected var controller:AppControl;		protected var data:Entity;		protected var _canvas:AppButton;		protected var _row:String;				private var _factory:AppFactory;		private var lines:MovieClip;		private var actions:MovieClip;				public var labels:Array;		public var focused:Boolean;		public var sel_item:MovieClip;		public var sel:Number;				public function Nav_li(model:AppModel, controller:AppControl, data:Entity ) {			this.model = model			this.controller = controller;			this.data = data;						init();					}						public function init():void {						TweenPlugin.activate([EndArrayPlugin, ColorMatrixFilterPlugin, TintPlugin, ColorTransformPlugin, AutoAlphaPlugin, ScrollRectPlugin]);						this._factory = new AppFactory();			this._factory.Hide(this);						labels = ["Actions", "Actions", "Actions", "Actions"];									Lines();			Actions(labels);									sel = 0;			sel_item = actions["item"+sel];			Highlight(true);						focused = false;					}						public function Show(on:Boolean=true):void {						focused = on;			var a:Number = 1;						if (!on){				a = 0;			}						TweenLite.to(this, 0.8, {autoAlpha:a, ease:Expo.easeOut});						var localPoint:Point = this.globalToLocal(new Point(44,0));			lines.x = localPoint.x;					}								public function Lines():void {						var mc = new MovieClip();			this.lines = mc;			this.addChild(mc);						var h1 = _factory.Mov(mc, "h1", [0,0], [1,1]);			h1.addChild(new hr());						var h2 = _factory.Mov(mc, "h2", [0,59+4], [1,1]);			h2.addChild(new hr());						//h1.sx = mc.h1.x = localPoint.x;			//h2.sx = mc.h2.x = localPoint.x;			//Hide(h1);			//Hide(h2);			h1.width = h2.width = 1144;			h1.height = h2.height = 1;						_factory._queue.load();								}				public function Actions(labels:Array):void {						var mc = new MovieClip();			mc.y = 13;						this.actions = mc;			this.addChild(mc);						var select = _factory.Mov(mc, "select", [0,0], [1,1]);			var fill = _factory.Mov(select, "fill", [0,-13]);												var h1 = new hi();			var h2 = new hi();						fill.addChild(h1);			fill.addChild(h2);						h2.height = h2.height = 4;			h2.y = 60;							var x = 0;			for (var i=0; i<labels.length; i++){				var item = _factory.Mov(mc, "item"+i, [x,0]);				//item.readme = mc.arr[i] + " Button " + (i+1) + " of " + mc.arr.length;								var txt = _factory.Mov(item, "txt", [0,0]);				var ico;				/*				if (mc.arr[i]=="Remind Me" && mc.o.remind==true){					mc.arr[i]="Cancel Reminder";				}				if (mc.arr[i]=="Bookmark" && mc.o.pin==true){					mc.arr[i]="Bookmarked";				}				if (mc.arr[i]=="Record" && mc.o.rec==true){					mc.arr[i]="Record Options";				}				if (mc.arr[i]=="     Reminder Set"){					ico = Mov(txt, "ico", [17,19]);					ico.addChild(new ico_check());				}				if (mc.arr[i]=="     Recording Set"){					ico = Mov(txt, "ico", [17,19]);					ico.addChild(new ico_check());				}				if (mc.arr[i]=="     Bookmarked"){					ico = Mov(txt, "ico", [17,19]);					ico.addChild(new ico_check());				}				*/				var str = _factory.Spr(txt, "str", [0,0], [1,1],					labels[i], "xnav", 3, "ccc");				//Hide(item);				x += str.getChildAt(0).textWidth+55;			}								}												public function ActionSelect(arr:Number, absolute:Boolean=false):void {						if (sel+arr < 0){ return; }			if (labels.length <= sel+arr){ return; }						sel += arr;						Highlight(false);			sel_item = actions["item"+sel];			Highlight(true);					}								public function Highlight(on:Boolean=true):void {						var a:Number = 1;			var c = 0x2ca4e3;						if (!on){				a = 0;				c = null;			}						TweenLite.to(sel_item, 0.6, {tint:c, ease:Expo.easeOut});			TweenLite.to(actions.select, 0.6, {x:sel_item.sx, width:sel_item.width, ease:Expo.easeOut});					}										public function get entity():Entity{			return data		}		public function set row(value:String){			this._row = value;		}		public function get row():String{			return _row;		}		public function get canvas():AppButton{			return _canvas;		}};}