package com.mhl.libs {		import com.mhl.*;		import com.mhl.views.entity;		import com.mhl.views.episode;		import flash.display.MovieClip;			import flash.display.Sprite;		import flash.text.TextField;	    import flash.text.TextFieldAutoSize;	    import flash.text.TextFormat;		import flash.display.Shape;		import flash.display.Graphics;					import flash.events.GestureEvent;		import flash.events.PressAndTapGestureEvent;		import flash.events.TouchEvent;		import flash.ui.Multitouch;		import flash.ui.MultitouchInputMode;		import flash.geom.*;		import com.greensock.*;		import com.greensock.easing.*;		import com.greensock.plugins.*;		import com.greensock.loading.*;		import com.greensock.events.LoaderEvent;		import com.greensock.loading.display.*;				import flash.events.*;		import flash.events.EventDispatcher;		import flash.events.Event;		import flash.data.SQLResult;		import flash.data.SQLStatement;		import flash.utils.Dictionary; 		 public class recentActivity extends MovieClip{		public var _holder:MovieClip;		public var _database:Object;		public var _street:MovieClip;		public var _daylight:lighting; 		public var _library:MovieClip;		public var _heroRack:MovieClip; 		public var _heroList:MovieClip;				private var tvSeriesStmt:SQLStatement;		public var _tvSeriesRslt:SQLResult;				public var  touchMoveID:int; 				public var ypos:int;		public var _showClipArray:Array;				public var _tvSeriesMap:Dictionary		public var _tvSeriesArr:Array;								public function recentActivity(holder:MovieClip, database:Object) {						this._holder = holder;			this._database = database;			this._showClipArray = new Array();			this._tvSeriesMap = new Dictionary();			this._tvSeriesArr = [ "'Mad Men'","'The Walking Dead'", "'Big Love'", "'True Blood'"];										}		public function create():void{							this._street = new MovieClip;			addChild(_street);						_daylight = new lighting();			_street.addChild(_daylight);			_daylight.name = "_daylight"			_daylight.alpha= .9						this._library = new MovieClip;			_street.addChild(_library);						// Get Tv Series from Database start sync of async 			tvSeriesStmt = new SQLStatement();			tvSeriesStmt.sqlConnection =_database.conn;			var _tvSeriesSql:String = "SELECT  tv.p, episodes.parentTitle, episodes.title, episodes.description FROM tv, episodes WHERE tv.parentid = episodes.parentid and tv.title IN ("+_tvSeriesArr+");";			tvSeriesStmt.text = _tvSeriesSql;			tvSeriesStmt.itemClass = entity;			tvSeriesStmt.addEventListener(SQLEvent.RESULT, tvSeriesRslt);			tvSeriesStmt.addEventListener(SQLErrorEvent.ERROR, tvSeriesErr);			tvSeriesStmt.execute(120);						_library.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);/*			_library.addEventListener(recentActivity.MOVE, move);*/							touchMoveID = 0; 										}		public function move(e:Event):void {			trace("Billy Blanks in da hOuse");		}		public function listView():void{			var ypos:int = 100			for  ( var key:* in _tvSeriesMap) {				var _listItem = _tvSeriesMap[key][0].seriesListView();				_library.addChild(_listItem);				_listItem.y = ypos;				ypos += _listItem.height +20;				}											}		public 	function tvSeriesRslt(event:SQLEvent):void			{				trace("Data loaded");				tvSeriesStmt.removeEventListener(SQLEvent.RESULT, tvSeriesRslt);				tvSeriesStmt.removeEventListener(SQLErrorEvent.ERROR, tvSeriesErr);				_tvSeriesRslt = tvSeriesStmt.getResult();				/*				var myFunction:Function = function(obj:Object):void {		         //your code here					trace(obj.title)		         };		     	_tvSeriesRslt.filter(myFunction, "True Blood");*/								for(var shows:String in _tvSeriesRslt.data) {				_tvSeriesMap[_tvSeriesRslt.data[shows].parentTitle] = 	new Array();				}				for(var episodes:String in _tvSeriesRslt.data) {					_tvSeriesMap[_tvSeriesRslt.data[episodes].parentTitle].push(_tvSeriesRslt.data[episodes]);				}									listView();				}						public function tvSeriesErr(event:SQLErrorEvent):void			{				trace("Error loading data");				tvSeriesStmt.removeEventListener(SQLEvent.RESULT, tvSeriesRslt);				tvSeriesStmt.removeEventListener(SQLErrorEvent.ERROR, tvSeriesErr);				trace("SELECT error:", event.error);				trace("event.error.message:", event.error.message);				trace("event.error.details:", event.error.details);			}						public function onTouchBegin(event:TouchEvent) { 			if(touchMoveID != 0) { 			        trace ("already moving. ignoring new touch");     			        return; 			    }			 touchMoveID = event.touchPointID; 			 _holder.stage.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove); 			 _holder.stage.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);					_library._rightBound = 768 -_library.height-120 ;			_library._leftBound = 0;			_library._inMotion = true;			_library._finger_y = event.stageY			_library._destination_y = _library.y;			_library._velocity = 0;			} 			public function onTouchMove(event:TouchEvent) { 				var omc = null;			    if(event.touchPointID != touchMoveID) { 			       trace("ignoring unrelated touch"); 			        return; 			    } 				if (_library._inMotion){				_library._destination_y += (event.stageY-_library._finger_y);				_library._finger_y = event.stageY;				_library.speed = 1.5;				} else {					_library.speed = 6;				}				_library.velocity = (_library.y-_library._destination_y);				_library.y -= (_library.y-_library._destination_y) / _library.speed;				// stop horizontal scroll if vertical velocity is high				if (_library.velocity>4 && omc!=null){ 					_library._inMotion=false;				}			} 		public function onTouchEnd(event:TouchEvent) { 				if(event.touchPointID != touchMoveID) { 			        trace("ignoring unrelated touch end"); 			        return; 			    } 				_library._inMotion = false;				_library._destination_y -= _library.velocity*10;						if (_library.y > _library._leftBound){ 							TweenLite.to(_library, .5, { y:_library._leftBound, ease:Expo.easeOut});						}					if (_library.y < _library._rightBound){ 						TweenLite.to(_library, .5, { y:_library._rightBound, ease:Expo.easeOut});					}			    touchMoveID = 0; 			    _holder.stage.removeEventListener(TouchEvent.TOUCH_MOVE, onTouchMove); 			   _holder.stage.removeEventListener(TouchEvent.TOUCH_END, onTouchEnd);			   trace("touch end" + event.touchPointID); 			}									public function kill():void{						removeChild(_street);								}								public function moreDaylight(num:Number){			TweenLite.to(_daylight, .6, { autoAlpha: num, ease:Expo.easeIn});		}		public function lessDaylight(){			TweenLite.to(_daylight, .8, { autoAlpha:0, ease:Expo.easeIn});		}					}};