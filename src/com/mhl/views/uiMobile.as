////  navigationCollapse////  Created by Matthew on 2012-10-11.//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.////package com.mhl.views {	import com.mhl.*	import app.model.*;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.GestureEvent;	import flash.events.PressAndTapGestureEvent;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.Event;	import flash.events.*;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.greensock.loading.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.display.*;	 public class uiMobile  extends MovieClip{					public var _model:AppModel;			public var _primaryNav:MenuCollapse;			public var _secondaryNav:MovieClip;			public var _close:SimpleButton;			public var _guide:SimpleButton;			public var _saved:SimpleButton;			public var _search:SimpleButton;			public var _guideOn:SimpleButton;			public var _savedOn:SimpleButton;			public var _searchOn:SimpleButton;			public var _subGuide:MovieClip;			public var _subSaved:MovieClip;			public var _subSearch:MovieClip;						public var _recentActivity:SimpleButton;			public var _recordings:SimpleButton;			public var _downloads:SimpleButton;						public var _recentActivityOn:SimpleButton;			public var _recordingsOn:SimpleButton;			public var _downloadsOn:SimpleButton;						public var _fullListing:SimpleButton;			public var _fullListingOn:SimpleButton;			public var _holder:MovieClip;			public var _lock:MovieClip;						public var _primary:Array;			public var _secondary:Array;			public var _sections:Array;			public var _isNavOpen:Boolean;						public function uiMobile(model:AppModel, holder:MovieClip) {						//  link model and create  'Menu Collapse' (from library)			this._model = model;			this._holder = holder;			this._primaryNav = new MenuCollapse();			addChild(_primaryNav);						// get and set all instances witin element			this._guide = _primaryNav._guide;			this._saved = _primaryNav._saved;			this._search = _primaryNav._search;						this._guideOn = _primaryNav._guideOn;			this._savedOn = _primaryNav._savedOn;			this._searchOn = _primaryNav._searchOn;						this._primary = [ {title: "Guide", off: _guide, on:_guideOn, sub:"_fullListing" }, {title: "Saved", off: _saved, on:_savedOn, sub:"_recentActivity"}, {title: "Search", off: _search, on:_searchOn, sub:""}];						this._secondaryNav = _primaryNav._secondaryNav;			this._close = _secondaryNav._close;			this._subGuide = _primaryNav._secondaryNav._subGuide;			this._subSaved = _primaryNav._secondaryNav._subSaved;			this._subSearch = _primaryNav._secondaryNav._subSearch;						this._secondary = [ _subGuide, _subGuide, _subGuide];						this._recentActivity = _subSaved._recentActivity;			this._recordings = _subSaved._recordings;			this._downloads = _subSaved._downloads;			this._fullListing = _subGuide._fullListing;			this._recentActivityOn = _subSaved._recentActivityOn;			this._recordingsOn = _subSaved._recordingsOn;			this._downloadsOn = _subSaved._downloadsOn;			this._fullListingOn = _subGuide._fullListingOn;					/*	this._sections = [ _recentActivity, _recordings, _downloads, _fullListing ];*/			this._sections = [ {title: "Recent Activity", off: _recentActivity, on:_recentActivityOn }, {title: "Recordings", off: _recordings, on:_recordingsOn}, {title: "Downloads", off: _downloads, on:_downloadsOn}, {title: "Full Listing", off: _fullListing, on: _fullListingOn}];						// set defaults			_primaryNav.x = 8;			_primaryNav.y = 8;			_primaryNav.visible= false;			_primaryNav._collapseOn.visible = false;							this._lock = new canvas(_primaryNav);				_primaryNav.addChild(_lock);				_lock.visible = false;						for each(var nav:Object in _primary){				nav.off.addEventListener(TouchEvent.TOUCH_TAP, setNavigation);				nav.off.addEventListener(TouchEvent.TOUCH_TAP, openClose);			}			for each(var subNav:Object in _sections){				subNav.off.addEventListener(TouchEvent.TOUCH_TAP, setSubNavigation);			}			_primaryNav["_collapse"].addEventListener(TouchEvent.TOUCH_TAP, openClose);						_isNavOpen = false;										}					public function openClose(e:TouchEvent):void{			if(_isNavOpen== false ){			TweenLite.to(_holder, .8, {x:300, ease:Expo.easeOut});			_primaryNav["_collapse"].visible = false;			_primaryNav["_collapseOn"].visible = true;			_isNavOpen = true;			this._lock.visible = true;			this._lock.addEventListener(TouchEvent.TOUCH_TAP, openClose);		}else{			TweenLite.to(_holder, .6, {x:0, ease:Expo.easeOut});			_primaryNav["_collapse"].visible = true;			_primaryNav["_collapseOn"].visible = false;			_isNavOpen = false;			this._lock.visible = false;			this._lock.removeEventListener(TouchEvent.TOUCH_TAP, openClose);								}				}		 public function resetNavigation():void{						this._close.visible = false;			_primaryNav._collapse.txt.text = "Menu";		}	public function navigationOnOff(navigationOnOff:Boolean){				// show and hide primary navigation		if(navigationOnOff== true ){			_primaryNav.visible= true;			TweenLite.to(_primaryNav, 1.2, { autoAlpha:1, ease:Expo.easeOut});				}else{			TweenLite.to(_primaryNav, 0.2, {autoAlpha:0,  ease:Expo.easeOut});			_primaryNav.visible= false;					}			}		public function setNavigation(e:TouchEvent):void{				// get from updates from model			var nextSection = e.target					// loop sections array and find tapped primary nav element		var i:uint		for(i= 0; i< _primary.length; i++){						if(_primary[i].off==nextSection){						// set button highlight and exchange 'menu' txt with primary title			_primary[i].off.visible = false			_primary[i].on.visible = true			_primaryNav._collapse.txt.text = _primary[i].title					var subOn = _primary[i].sub+"On";	/*		trace(subOn)*/			this[_primary[i].sub].visible = false;			this[subOn].visible = true;						// show seconary navigation options in chrome			var sub = "_sub"+_primary[i].title			this[sub].visible = true;			this._close.visible = true;							}else{			_primary[i].off.visible = true			_primary[i].on.visible = false			var resetSub = "_sub"+_primary[i].title			this[resetSub].visible = false;			}		}						}		public function setSubNavigation(e:TouchEvent):void{		var nextSub = e.target			/*	if(e.target.parent == "_subSearch"){return;}*/				var i:uint		for(i= 0; i< _sections.length; i++){						if(_sections[i].off==nextSub){									_sections[i].off.visible = false						_sections[i].on.visible = true				}else{									_sections[i].off.visible = true					_sections[i].on.visible = false			}		}			}				}};